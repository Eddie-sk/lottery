var __getOwnPropNames = Object.getOwnPropertyNames;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// <define:process.env.UNI_STAT_TITLE_JSON>
var init_define_process_env_UNI_STAT_TITLE_JSON = __esm({
  "<define:process.env.UNI_STAT_TITLE_JSON>"() {
  }
});

// <define:process.env.UNI_STAT_UNI_CLOUD>
var init_define_process_env_UNI_STAT_UNI_CLOUD = __esm({
  "<define:process.env.UNI_STAT_UNI_CLOUD>"() {
  }
});

// ../../../../../../Users/sunkai/work/lottery/node_modules/vue-input-filter/_build/index.js
var require_build = __commonJS({
  "../../../../../../Users/sunkai/work/lottery/node_modules/vue-input-filter/_build/index.js"(exports, module) {
    "use strict";
    init_define_process_env_UNI_STAT_TITLE_JSON();
    init_define_process_env_UNI_STAT_UNI_CLOUD();
    var letter = {
      legalReg: [/^[a-zA-Z]{1,}$/],
      legalKeyCodeRange: [
        {
          min: 65,
          max: 90
        }
      ]
    };
    var number = {
      legalReg: [/^[0-9]{1,}$/],
      legalKeyCodeRange: [
        {
          min: 48,
          max: 57
        },
        {
          min: 96,
          max: 105
        }
      ]
    };
    var decimal = {
      legalReg: [/[0-9.]{1,}$/],
      legalKeyCode: [8, 32, 37, 38, 39, 40, 46, 190],
      legalKeyCodeRange: [
        {
          min: 48,
          max: 57
        },
        {
          min: 96,
          max: 105
        }
      ]
    };
    var strategies = {
      letter,
      number,
      decimal
    };
    var defaultOptions = {
      legalReg: [],
      illegalReg: [],
      legalKeyCode: [8, 32, 37, 38, 39, 40, 46],
      legalKeyCodeRange: [],
      illegalKeyCode: [],
      illegalKeyCodeRange: []
    };
    var Filter = function() {
      function Filter2(el, type, options) {
        var _this = this;
        this.filterStrategy = Object.assign({}, defaultOptions, options || strategies[type]);
        this.oldText = "";
        this.position = 0;
        el.oninput = function() {
          var text = el.value;
          _this.filterInput(el, text);
        };
        el.onkeydown = function(event) {
          _this.filterKeyCode(event);
        };
        el.onfocus = function() {
          _this.position = el.selectionStart;
          _this.oldText = el.value;
        };
      }
      Filter2.prototype.checkKeyCode = function(keyCode) {
        var _a = this.filterStrategy, legalKeyCode = _a.legalKeyCode, legalKeyCodeRange = _a.legalKeyCodeRange, illegalKeyCode = _a.illegalKeyCode, illegalKeyCodeRange = _a.illegalKeyCodeRange;
        if (legalKeyCode.length > 0 || legalKeyCodeRange.length > 0) {
          if (legalKeyCode.some(function(code) {
            return code === keyCode;
          })) {
            return true;
          }
          if (legalKeyCodeRange.some(function(range) {
            return keyCode >= range.min && keyCode <= range.max;
          })) {
            return true;
          }
          return false;
        } else if (illegalKeyCode.length > 0 || illegalKeyCodeRange.length > 0) {
          if (illegalKeyCode.some(function(code) {
            return code === keyCode;
          })) {
            return false;
          }
          if (illegalKeyCodeRange.some(function(range) {
            return keyCode >= range.min && keyCode <= range.max;
          })) {
            return false;
          }
          return true;
        }
        return true;
      };
      Filter2.prototype.checkInput = function(input) {
        var _a = this.filterStrategy, legalReg = _a.legalReg, illegalReg = _a.illegalReg;
        if (legalReg.length > 0) {
          if (legalReg.some(function(reg) {
            return reg.test(input);
          })) {
            return true;
          }
          return false;
        } else if (illegalReg.length > 0) {
          if (illegalReg.some(function(reg) {
            return reg.test(input);
          })) {
            return false;
          }
          return true;
        }
        return true;
      };
      Filter2.prototype.filterInput = function(textarea, text) {
        var _this = this;
        if (text.length < this.oldText.length) {
          this.oldText = text;
          return;
        }
        var selectionStart = textarea.selectionStart, selectionEnd = textarea.selectionEnd;
        if (selectionStart !== selectionEnd) {
          this.position = selectionStart;
          return;
        }
        var newInput = "";
        if (selectionStart > text.length) {
          newInput = text.substring(this.oldText.length);
          this.position = selectionStart;
        } else {
          if (selectionStart !== selectionEnd) {
            newInput = text.substring(selectionStart, selectionEnd);
          } else {
            var inputLength = text.length - this.oldText.length;
            newInput = text.substr(selectionStart - inputLength, inputLength);
          }
        }
        var check = this.filterStrategy.oninput || this.checkInput;
        var testResult = check.call(this, newInput) && check.call(this, text);
        if (testResult) {
          this.position = selectionStart;
          this.oldText = text;
        } else {
          if (selectionStart === selectionEnd) {
            textarea.value = this.oldText;
            setTimeout(function() {
              textarea.value = _this.oldText;
              textarea.setSelectionRange(_this.position, _this.position);
            }, 0);
          }
        }
      };
      Filter2.prototype.filterKeyCode = function(event) {
        var keyCode = event.keyCode;
        var check = this.filterStrategy.onkeydown || this.checkKeyCode;
        if (!check.call(this, keyCode)) {
          event.preventDefault();
        }
      };
      return Filter2;
    }();
    var index = {
      install: function(vue, options) {
        vue.directive("input-filter", {
          bind: function(el, binding, vnode) {
            var defaultType = binding.arg || false;
            var options2 = binding.value;
            var filter = new Filter(el, defaultType, options2);
          }
        });
      }
    };
    module.exports = index;
  }
});

// dep:vue-input-filter
init_define_process_env_UNI_STAT_TITLE_JSON();
init_define_process_env_UNI_STAT_UNI_CLOUD();
var vue_input_filter_default = require_build();
export {
  vue_input_filter_default as default
};
//# sourceMappingURL=vue-input-filter.js.map
